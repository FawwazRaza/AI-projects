def check_correct_row(k, i, n, matrix):
    row_sum = sum(abs(matrix[i][j]) for j in range(n) if k != j)
    return abs(matrix[i][k]) >= row_sum

def make_diagonally_dominant(matrix):
    n = len(matrix)
    temp_matrix = [row[:] for row in matrix]  # Deep copy of the original matrix
    
    for i in range(n):
        swapped = False
        for k in range(n):
            if i != k and check_correct_row(i, k, n, matrix):
                matrix[i], matrix[k] = matrix[k], matrix[i]  # Swap rows
                swapped = True
                break
        
        if not swapped:
            print("System cannot be converted into diagonally dominant.")
            return matrix  # Return as is if no swap can make it dominant
    
    if matrix == temp_matrix:
        print("System cannot be converted into diagonally dominant.")
    else:
        print("The new matrix is:")
        for row in matrix:
            print(row)
    
    return matrix

def diagonally_dominant_matrix_check(matrix):
    n = len(matrix)
    for i in range(n):
        row_sum = sum(abs(matrix[i][j]) for j in range(n) if i != j)
        if abs(matrix[i][i]) < row_sum:
            return False
    return True

def input_augmented_matrix(n):
    matrix = []
    print(f"Enter the augmented matrix (Each row must have {n + 1} elements):")
    for i in range(n):
        row = input(f"Row {i+1}: ").split()
        if len(row) != n + 1:
            print(f"Each row must have {n + 1} elements.")
            return []
        matrix.append([int(x) for x in row])
    return matrix

def main():
    n = int(input("Enter the size of the matrix (n): "))
    augmented_matrix = input_augmented_matrix(n)
    
    if augmented_matrix:
        print("The augmented matrix is:")
        for row in augmented_matrix:
            print(row)
        
        diagonally_dominant = diagonally_dominant_matrix_check(augmented_matrix)
        
        if diagonally_dominant:
            print("The matrix is diagonally dominant.")
        else:
            print("The matrix is not diagonally dominant.")
            new_matrix = make_diagonally_dominant(augmented_matrix)
            check = diagonally_dominant_matrix_check(new_matrix)
            if not check:
                print("This matrix cannot be made completely diagonally dominant.")

if __name__ == "__main__":
    main()
